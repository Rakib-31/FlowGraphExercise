[{"I:\\FlowGraphExercise\\flowgraph\\src\\App.js":"1","I:\\FlowGraphExercise\\flowgraph\\src\\FlowGraphFolder\\flowChart.js":"2","I:\\FlowGraphExercise\\flowgraph\\src\\index.js":"3","I:\\FlowGraphExercise\\flowgraph\\src\\reportWebVitals.js":"4","I:\\FlowGraphExercise\\flowgraph\\src\\modal\\questionModal.js":"5"},{"size":12049,"mtime":1606945120420,"results":"6","hashOfConfig":"7"},{"size":4322,"mtime":1606764323928,"results":"8","hashOfConfig":"7"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"7"},{"size":4205,"mtime":1606925925655,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"89od7o",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"I:\\FlowGraphExercise\\flowgraph\\src\\App.js",["23","24"],"I:\\FlowGraphExercise\\flowgraph\\src\\FlowGraphFolder\\flowChart.js",[],"I:\\FlowGraphExercise\\flowgraph\\src\\index.js",[],"I:\\FlowGraphExercise\\flowgraph\\src\\reportWebVitals.js",[],"I:\\FlowGraphExercise\\flowgraph\\src\\modal\\questionModal.js",["25","26","27"],"import React, {useState,useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Modal from 'react-modal';\r\n \r\nconst customStyles = {\r\n  content : {\r\n    top                   : '50%',\r\n    left                  : '50%',\r\n    right                 : 'auto',\r\n    bottom                : 'auto',\r\n    marginRight           : '-50%',\r\n\r\n    transform             : 'translate(-50%, -50%)',\r\n    backgroundColor       : 'grey'\r\n  }\r\n};\r\n \r\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\r\nModal.setAppElement(document.getElementById('showmodal'))\r\n \r\nexport default function QuestionModal(props){\r\n  var subtitle;\r\n  const [modalIsOpen,setIsOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n      console.log('false is false');\r\n    setIsOpen(props.openModal);\r\n  });\r\n\r\n  function showModal(){\r\n      \r\n          return (\r\n            <div className=\"text-center\" onClick={()=>props.closeModal(false)}>\r\n            \r\n            <Modal\r\n              isOpen={modalIsOpen}\r\n              style={customStyles}\r\n              contentLabel=\"Example Modal\"\r\n              \r\n            >\r\n                <div className=\"text-center ml-4\">\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}}  type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}}  type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    \r\n                </div>\r\n              </Modal>\r\n          </div>\r\n          );\r\n      \r\n  }\r\n \r\n    return (\r\n\r\n        <div>{showModal()}</div>\r\n      \r\n    );\r\n}",{"ruleId":"28","severity":1,"message":"29","line":69,"column":11,"nodeType":"30","endLine":69,"endColumn":37},{"ruleId":"31","severity":1,"message":"32","line":87,"column":20,"nodeType":"33","messageId":"34","endLine":87,"endColumn":22},{"ruleId":"35","severity":1,"message":"36","line":2,"column":8,"nodeType":"37","messageId":"38","endLine":2,"endColumn":16},{"ruleId":"35","severity":1,"message":"39","line":22,"column":7,"nodeType":"37","messageId":"38","endLine":22,"endColumn":15},{"ruleId":"28","severity":1,"message":"40","line":25,"column":3,"nodeType":"37","endLine":25,"endColumn":12,"suggestions":"41"},"react-hooks/exhaustive-deps","Assignments to the 'ctx' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'subtitle' is defined but never used.","React Hook useEffect contains a call to 'setIsOpen'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.openModal] as a second argument to the useEffect Hook.",["42"],{"desc":"43","fix":"44"},"Add dependencies array: [props.openModal]",{"range":"45","text":"46"},[825,825],", [props.openModal]"]