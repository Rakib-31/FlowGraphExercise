[{"I:\\FlowGraphExercise\\flowgraph\\src\\App.js":"1","I:\\FlowGraphExercise\\flowgraph\\src\\FlowGraphFolder\\flowChart.js":"2","I:\\FlowGraphExercise\\flowgraph\\src\\index.js":"3","I:\\FlowGraphExercise\\flowgraph\\src\\reportWebVitals.js":"4","I:\\FlowGraphExercise\\flowgraph\\src\\modal\\questionModal.js":"5"},{"size":12092,"mtime":1606940787353,"results":"6","hashOfConfig":"7"},{"size":4322,"mtime":1606764323928,"results":"8","hashOfConfig":"7"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"7"},{"size":4205,"mtime":1606925925655,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"89od7o",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"I:\\FlowGraphExercise\\flowgraph\\src\\App.js",["24","25"],"import React, { useRef, useEffect, useState } from 'react';\nimport QuestionModal from './modal/questionModal';\n \nfunction App() {\n\n  const [openModal, setOpenModal] = useState(false);\n\n  const canvas = useRef();\n  //let size = {x: 100,y: 100,w: 170,h: 80};\n  let ctx = null;\n  let parentBox = null;\n  let isDown = false;\n  let dragTarget = null;\n  let startX = null;\n  let startY = null;\n\n  const boxes = [\n    {\n      id: '0',\n      pid: null,\n      text: '+',\n      size: {x: 600,y: 120, r: 50},\n      isCircle: true\n    },\n    {\n      id: '1',\n      pid: '0',\n      text: 'Are you feeling any pain today?',\n      size: {x: 350,y: 100,w: 170,h: 80},\n      dropdownBox: {x: 370, y: 110, w: 130, h: 15},\n      threeDotButtonSize: {x: 490, y: 160, w: 30, h: 20},\n      addField: {x: 520, y: 80, w: 100, h: 30},\n      editField: {x: 520, y: 110, w: 100, h: 30},\n      deleteField: {x: 520, y: 140, w: 100, h: 30},\n      responseField: {x: 520, y: 170, w: 100, h: 30},\n      isCircle: false\n    },\n    {\n      id: '2',\n      pid: '0',\n      text: 'Yes',\n      next: '2',\n      size: {x: 50,y: 250,w: 170,h: 80},\n      dropdownBox: {x: 70, y: 260, w: 130, h: 15},\n      threeDotButtonSize: {x: 190, y: 310, w: 30, h: 20},\n      addField: {x: 220, y: 230, w: 100, h: 30},\n      editField: {x: 220, y: 260, w: 100, h: 30},\n      deleteField: {x: 220, y: 290, w: 100, h: 30},\n      responseField: {x: 220, y: 320, w: 100, h: 30},\n      isCircle: false\n    },\n    {\n      id: '3',\n      pid: '1',\n      text: '+',\n      size: {x: 400,y: 600, r: 50},\n      isCircle: true\n    }\n  ]\n  \n \n  // initialize the canvas context\n  useEffect(() => {\n    // dynamically assign the width and height to canvas\n    const canvasEle = canvas.current;\n    canvasEle.width = canvasEle.clientWidth;\n    canvasEle.height = canvasEle.clientHeight;\n    console.log(canvasEle.clientWidth);\n    console.log(canvasEle.clientHeight);\n \n    // get context of the canvas\n    ctx = canvasEle.getContext(\"2d\");\n    //drawStartCircle(boxes[0]);\n    draw();\n  });\n\n  const drawStartCircle = (circle) => {\n    ctx.beginPath();\n    ctx.arc(circle.size.x, circle.size.y, circle.size.r, 0, 2 * Math.PI);\n    ctx.fillStyle = \"black\";\n    ctx.fill();\n    ctx.font = '50px';\n    ctx.fillStyle = 'white';\n    ctx.textAlign = 'center';\n    ctx.fillText(circle.text, circle.size.x, circle.size.y + 4);\n  }\n \n  const draw = () => {\n    \n\n    console.log(canvas.current.clientWidth);\n    ctx.clearRect(0, 0, canvas.current.clientWidth, canvas.current.clientHeight);\n    boxes.map(info => {\n      if(info.isCircle) drawStartCircle(info);\n      else drawFillRect(info);\n      if(info.pid){\n        parentBox = getParent(info.pid);\n        console.log('parent ' ,parentBox);\n        linDrawBetweenPrentAndChild(parentBox.size, info.size, parentBox.isCircle, info.isCircle);\n      }\n    });\n    \n  }\n\n  const linDrawBetweenPrentAndChild = (parentBox, childBox, parentIsCircle, childIsCiercle) => {\n    if(parentIsCircle){\n      ctx.beginPath();\n      ctx.moveTo(parentBox.x, parentBox.y);\n      ctx.lineTo(childBox.x + childBox.w / 2, childBox.y);\n      ctx.stroke();\n    }\n    else if(childIsCiercle){\n      ctx.beginPath();\n      ctx.moveTo(parentBox.x + parentBox.w / 2, parentBox.y + parentBox.h);\n      ctx.lineTo(childBox.x, childBox.y);\n      ctx.stroke();\n    }\n    else{\n      ctx.beginPath();\n      ctx.moveTo(parentBox.x + parentBox.w / 2, parentBox.y + parentBox.h);\n      ctx.lineTo(childBox.x + childBox.w / 2, childBox.y);\n      ctx.stroke();\n    }\n  }\n\n  const getParent = (pid) => {\n    for(let i = 0; i < boxes.length; i++){\n      if(boxes[i].id === pid){\n        return boxes[i];\n      }\n    }\n  }\n \n  // draw rectangle with background\n  const drawFillRect = (info, style = {}) => {\n    console.log(info.id);\n    const { x, y, w, h } = info.size;\n    const dotRect = info.threeDotButtonSize;\n    const { backgroundColor = 'black' } = style;\n \n    ctx.beginPath();\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(x, y, w, h);\n\n    ctx.fillStyle = 'white';\n    \n    ctx.fillRect(info.dropdownBox.x, info.dropdownBox.y, info.dropdownBox.w, info.dropdownBox.h);\n\n    ctx.lineWidth = 4;\n    ctx.strokeStyle = \"#000000\";\n    ctx.font=\"12px Georgia\";\n    ctx.textAlign=\"center\"; \n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = \"red\";\n    ctx.fillText('Question?...', info.dropdownBox.x + (info.dropdownBox.w/2), info.dropdownBox.y + (info.dropdownBox.h/2));\n\n    let tringleX1 = info.dropdownBox.x + info.dropdownBox.w - 18;\n    let tringleX2 = info.dropdownBox.x + info.dropdownBox.w - 15;\n    let tringleX3 = (tringleX1 + tringleX2) / 2;\n    \n    //drawing dropdown triangle\n    ctx.moveTo(tringleX1, info.dropdownBox.y + 6);\n    ctx.lineTo(tringleX2, info.dropdownBox.y + 6);\n    ctx.lineTo(tringleX3, info.dropdownBox.y + 8);\n    ctx.closePath();\n    \n\n    ctx.lineWidth = 10;\n    ctx.strokeStyle = '#666666';\n    ctx.stroke();\n    \n    ctx.fillStyle = 'black';\n    ctx.fillRect(dotRect.x, dotRect.y, dotRect.w, dotRect.h);\n    ctx.lineWidth = 4;\n    ctx.strokeStyle = \"#000000\";\n    ctx.font=\"20px Georgia\";\n    ctx.textAlign=\"center\"; \n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = \"red\";\n    ctx.fillText('...', dotRect.x + (dotRect.w/2), dotRect.y + (dotRect.h/2));\n\n    // ctx.lineWidth = 4;\n    // ctx.strokeStyle = \"#000000\";\n    // ctx.font=\"12px Georgia\";\n    // ctx.textAlign=\"center\"; \n    // ctx.textBaseline = \"middle\";\n    // ctx.fillStyle = \"red\";\n    // ctx.fillText(info.id,x+(w/2),y+(h/5));\n\n    // ctx.lineWidth = 4;\n    // ctx.strokeStyle = \"#000000\";\n    // ctx.font=\"12px Georgia\";\n     \n    // ctx.textBaseline = \"middle\";\n    // ctx.fillStyle = \"red\";    \n    // ctx.fillText(info.text,x+(w/2),y+(h/2));\n\n    // ctx.lineWidth = 4;\n    // ctx.strokeStyle = \"#000000\";\n    // ctx.font=\"12px Georgia\";\n    // ctx.textAlign=\"center\"; \n    // ctx.textBaseline = \"middle\";\n    // ctx.fillStyle = \"red\";\n    // let next = 'null';\n    // if(info.next) next = info.next;\n    // ctx.fillText(next,x+(w/2),y+(3*h/4));\n    //size.x += 150;\n    //size.y += 150;\n  }\n\n  const positioningMenuItem = (menuItem , text) => {\n    console.log(menuItem)\n    ctx.beginPath();\n    ctx.fillStyle = 'blue';\n    ctx.fillRect(menuItem.x, menuItem.y, menuItem.w, menuItem.h);\n    ctx.lineWidth = 4;\n    ctx.strokeStyle = \"#000000\";\n    ctx.font=\"12px Georgia\";\n    ctx.textAlign=\"center\"; \n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = \"red\";\n    ctx.fillText(text, menuItem.x + (menuItem.w/2), menuItem.y + (menuItem.h/2));\n    ctx.moveTo(menuItem.x, menuItem.y + menuItem.h);\n    ctx.lineTo(menuItem.x + menuItem.w, menuItem.y + menuItem.h);\n    ctx.stroke();\n  }\n\n  const drawPopupMenu = (box) => {\n    console.log(box);\n    positioningMenuItem(box.addField, 'Add');\n    positioningMenuItem(box.editField, 'Edit');\n    positioningMenuItem(box.deleteField, 'Delete');\n    positioningMenuItem(box.responseField, 'Add response');\n  }\n \n  // identify the click event in the rectangle\n  const hitBox = (x, y) => {\n\n    let isTarget = null;\n\n    for (let i = 0; i < boxes.length; i++) {\n      const box = boxes[i];\n\n      if(box.isCircle){\n        if((x-box.size.x) * (x-box.size.x) + (y-box.size.y) * (y-box.size.y) - box.size.r * box.size.r <= 0){\n          dragTarget = box;\n          isTarget = true;\n          boxes.push({\n            id: '5',\n            pid: '0',\n            text: 'Are you feeling any pain today?',\n            size: {x: 350,y: 100,w: 170,h: 80},\n            dropdownBox: {x: 370, y: 110, w: 130, h: 15},\n            threeDotButtonSize: {x: 490, y: 160, w: 30, h: 20},\n            addField: {x: 520, y: 80, w: 100, h: 30},\n            editField: {x: 520, y: 110, w: 100, h: 30},\n            deleteField: {x: 520, y: 140, w: 100, h: 30},\n            responseField: {x: 520, y: 170, w: 100, h: 30},\n            isCircle: false\n          })\n          break;\n        }\n      }\n\n      else if(x >= box.dropdownBox.x && x <= box.dropdownBox.x + box.dropdownBox.w && y >= box.dropdownBox.y && y <= box.dropdownBox.y + box.dropdownBox.h){\n        setOpenModal(true);\n      }\n\n      else if (x >= box.threeDotButtonSize.x && x <= box.threeDotButtonSize.x + box.threeDotButtonSize.w && y >= box.threeDotButtonSize.y && y <= box.threeDotButtonSize.y + box.threeDotButtonSize.h) {\n        console.log('in threedot button');\n        dragTarget = box;\n        isTarget = true;\n        drawPopupMenu(box);\n        break;\n      }\n      else if(x >= box.addField.x && x <= box.addField.x + box.addField.w && y >= box.addField.y && y <= box.addField.y + box.addField.h){\n        console.log('addfield');\n        dragTarget = box;\n        console.log('in', dragTarget);\n        isTarget = true;\n        break;\n      }\n      else if(x >= box.editField.x && x <= box.editField.x + box.editField.w && y >= box.editField.y && y <= box.editField.y + box.editField.h){\n        console.log('editfield');\n        dragTarget = box;\n        console.log('in', dragTarget);\n        isTarget = true;\n        break;\n      }\n      else if(x >= box.deleteField.x && x <= box.deleteField.x + box.deleteField.w && y >= box.deleteField.y && y <= box.deleteField.y + box.deleteField.h){\n        console.log('deletefield');\n        dragTarget = box;\n        console.log('in', dragTarget);\n        isTarget = true;\n        break;\n      }\n      else if(x >= box.responseField.x && x <= box.responseField.x + box.responseField.w && y >= box.responseField.y && y <= box.responseField.y + box.responseField.h){\n        console.log('responsefield');\n        dragTarget = box;\n        console.log('in', dragTarget);\n        isTarget = true;\n        break;\n      }\n      else if (x >= box.size.x && x <= box.size.x + box.size.w && y >= box.size.y && y <= box.size.y + box.size.h) {\n        dragTarget = box;\n        console.log('in', dragTarget);\n        isTarget = true;\n        \n        break;\n      }\n    }\n    return isTarget;\n  }\n \n  const handleMouseDown = e => {\n    console.log('mouse down');\n\n    console.log(e.nativeEvent.offsetX , canvas.current.clientLeft);\n    startX = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n    startY = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n    console.log(startX, startY);\n    isDown = hitBox(startX, startY);\n    console.log('isdown ', isDown);\n\n  }\n\n  const handleMouseMove = e => {\n\n    console.log(isDown);\n    if (!isDown) return;\n    console.log('in move ' + e.nativeEvent.offsetX , canvas.current.clientLeft)\n\n    const mouseX = parseInt(e.nativeEvent.offsetX - canvas.current.clientLeft);\n    const mouseY = parseInt(e.nativeEvent.offsetY - canvas.current.clientTop);\n\n    const dx = mouseX - startX;\n    const dy = mouseY - startY;\n\n    startX = mouseX;\n    startY = mouseY;\n\n    console.log('dragtarget',dragTarget);\n    dragTarget.size.x += dx;\n    dragTarget.size.y += dy;\n\n    if(!dragTarget.isCircle){\n      dragTarget.threeDotButtonSize.x += dx;\n      dragTarget.threeDotButtonSize.y += dy;\n      dragTarget.addField.x += dx;\n      dragTarget.addField.y += dy;\n      dragTarget.editField.x += dx;\n      dragTarget.editField.y += dy;\n      dragTarget.deleteField.x += dx;\n      dragTarget.deleteField.y += dy;\n      dragTarget.responseField.x += dx;\n      dragTarget.responseField.y += dy;\n      dragTarget.dropdownBox.x += dx;\n      dragTarget.dropdownBox.y += dy;\n    }\n    draw();\n    \n  }\n  const handleMouseUp = e => {\n    dragTarget = null;\n    isDown = false;\n  }\n  const handleMouseOut = e => {\n    handleMouseUp(e);\n  }\n\n  const questionSelection = (question) => {\n    console.log(question);\n\n  }\n\n  const closeModal = (status) => {\n    setOpenModal(status);\n  }\n \n  return (\n    <div className=\"App\">\n    <QuestionModal openModal={openModal} closeModal={closeModal} questionSelection={questionSelection}/>\n      \n      <canvas \n        style={{height: '1000px', width: '100%'}}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseOut={handleMouseOut}\n        ref={canvas}\n      ><div id=\"showmodal\"></div></canvas>\n      \n    </div>\n  );\n}\n \nexport default App;","I:\\FlowGraphExercise\\flowgraph\\src\\FlowGraphFolder\\flowChart.js",[],"I:\\FlowGraphExercise\\flowgraph\\src\\index.js",[],"I:\\FlowGraphExercise\\flowgraph\\src\\reportWebVitals.js",[],"I:\\FlowGraphExercise\\flowgraph\\src\\modal\\questionModal.js",["26","27","28"],"import React, {useState,useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Modal from 'react-modal';\r\n \r\nconst customStyles = {\r\n  content : {\r\n    top                   : '50%',\r\n    left                  : '50%',\r\n    right                 : 'auto',\r\n    bottom                : 'auto',\r\n    marginRight           : '-50%',\r\n\r\n    transform             : 'translate(-50%, -50%)',\r\n    backgroundColor       : 'grey'\r\n  }\r\n};\r\n \r\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\r\nModal.setAppElement(document.getElementById('showmodal'))\r\n \r\nexport default function QuestionModal(props){\r\n  var subtitle;\r\n  const [modalIsOpen,setIsOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n      console.log('false is false');\r\n    setIsOpen(props.openModal);\r\n  });\r\n\r\n  function showModal(){\r\n      \r\n          return (\r\n            <div className=\"text-center\" onClick={()=>props.closeModal(false)}>\r\n            \r\n            <Modal\r\n              isOpen={modalIsOpen}\r\n              style={customStyles}\r\n              contentLabel=\"Example Modal\"\r\n              \r\n            >\r\n                <div className=\"text-center ml-4\">\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}}  type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}} type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    <input onClick={(e) => props.questionSelection(e.target.value)} style={{width: '500px', cursor: 'pointer'}}  type=\"text\" value=\"Are you feeling any pain today?\"/><br/>\r\n                    \r\n                </div>\r\n              </Modal>\r\n          </div>\r\n          );\r\n      \r\n  }\r\n \r\n    return (\r\n\r\n        <div>{showModal()}</div>\r\n      \r\n    );\r\n}",{"ruleId":"29","severity":1,"message":"30","line":72,"column":11,"nodeType":"31","endLine":72,"endColumn":37},{"ruleId":"32","severity":1,"message":"33","line":93,"column":20,"nodeType":"34","messageId":"35","endLine":93,"endColumn":22},{"ruleId":"36","severity":1,"message":"37","line":2,"column":8,"nodeType":"38","messageId":"39","endLine":2,"endColumn":16},{"ruleId":"36","severity":1,"message":"40","line":22,"column":7,"nodeType":"38","messageId":"39","endLine":22,"endColumn":15},{"ruleId":"29","severity":1,"message":"41","line":25,"column":3,"nodeType":"38","endLine":25,"endColumn":12,"suggestions":"42"},"react-hooks/exhaustive-deps","Assignments to the 'ctx' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'subtitle' is defined but never used.","React Hook useEffect contains a call to 'setIsOpen'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.openModal] as a second argument to the useEffect Hook.",["43"],{"desc":"44","fix":"45"},"Add dependencies array: [props.openModal]",{"range":"46","text":"47"},[825,825],", [props.openModal]"]